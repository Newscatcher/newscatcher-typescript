/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as NewscatcherApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { LatestHeadlinesRequestByParseDate } from "../../types/LatestHeadlinesRequestByParseDate";
import { LatestHeadlinesRequestRankedOnly } from "../../types/LatestHeadlinesRequestRankedOnly";
import { LatestHeadlinesRequestIsHeadline } from "../../types/LatestHeadlinesRequestIsHeadline";
import { LatestHeadlinesRequestIsOpinion } from "../../types/LatestHeadlinesRequestIsOpinion";
import { LatestHeadlinesRequestIsPaidContent } from "../../types/LatestHeadlinesRequestIsPaidContent";
import { LatestHeadlinesRequestWordCountMin } from "../../types/LatestHeadlinesRequestWordCountMin";
import { LatestHeadlinesRequestWordCountMax } from "../../types/LatestHeadlinesRequestWordCountMax";
import { LatestHeadlinesRequestPage } from "../../types/LatestHeadlinesRequestPage";
import { LatestHeadlinesRequestPageSize } from "../../types/LatestHeadlinesRequestPageSize";
import { LatestHeadlinesRequestClusteringEnabled } from "../../types/LatestHeadlinesRequestClusteringEnabled";
import { LatestHeadlinesRequestClusteringThreshold } from "../../types/LatestHeadlinesRequestClusteringThreshold";

export const LatestHeadlinesRequest: core.serialization.Schema<
    serializers.LatestHeadlinesRequest.Raw,
    NewscatcherApi.LatestHeadlinesRequest
> = core.serialization.object({
    when: core.serialization.string().optional(),
    byParseDate: core.serialization.property("by_parse_date", LatestHeadlinesRequestByParseDate.optional()),
    sortBy: core.serialization.property("sort_by", core.serialization.string().optional()),
    lang: core.serialization.unknown().optional(),
    notLang: core.serialization.property("not_lang", core.serialization.unknown().optional()),
    countries: core.serialization.unknown().optional(),
    notCountries: core.serialization.property("not_countries", core.serialization.unknown().optional()),
    sources: core.serialization.unknown().optional(),
    predefinedSources: core.serialization.property("predefined_sources", core.serialization.unknown().optional()),
    notSources: core.serialization.property("not_sources", core.serialization.unknown().optional()),
    notAuthorName: core.serialization.property("not_author_name", core.serialization.unknown().optional()),
    rankedOnly: core.serialization.property("ranked_only", LatestHeadlinesRequestRankedOnly.optional()),
    isHeadline: core.serialization.property("is_headline", LatestHeadlinesRequestIsHeadline.optional()),
    isOpinion: core.serialization.property("is_opinion", LatestHeadlinesRequestIsOpinion.optional()),
    isPaidContent: core.serialization.property("is_paid_content", LatestHeadlinesRequestIsPaidContent.optional()),
    parentUrl: core.serialization.property("parent_url", core.serialization.unknown().optional()),
    allLinks: core.serialization.property("all_links", core.serialization.unknown().optional()),
    allDomainLinks: core.serialization.property("all_domain_links", core.serialization.unknown().optional()),
    wordCountMin: core.serialization.property("word_count_min", LatestHeadlinesRequestWordCountMin.optional()),
    wordCountMax: core.serialization.property("word_count_max", LatestHeadlinesRequestWordCountMax.optional()),
    page: LatestHeadlinesRequestPage.optional(),
    pageSize: core.serialization.property("page_size", LatestHeadlinesRequestPageSize.optional()),
    clusteringVariable: core.serialization.property("clustering_variable", core.serialization.string().optional()),
    clusteringEnabled: core.serialization.property(
        "clustering_enabled",
        LatestHeadlinesRequestClusteringEnabled.optional()
    ),
    clusteringThreshold: core.serialization.property(
        "clustering_threshold",
        LatestHeadlinesRequestClusteringThreshold.optional()
    ),
    includeNlpData: core.serialization.property("include_nlp_data", core.serialization.boolean().optional()),
    hasNlp: core.serialization.property("has_nlp", core.serialization.boolean().optional()),
    theme: core.serialization.string().optional(),
    notTheme: core.serialization.property("not_theme", core.serialization.string().optional()),
    orgEntityName: core.serialization.property("ORG_entity_name", core.serialization.string().optional()),
    perEntityName: core.serialization.property("PER_entity_name", core.serialization.string().optional()),
    locEntityName: core.serialization.property("LOC_entity_name", core.serialization.string().optional()),
    miscEntityName: core.serialization.property("MISC_entity_name", core.serialization.string().optional()),
    titleSentimentMin: core.serialization.property("title_sentiment_min", core.serialization.number().optional()),
    titleSentimentMax: core.serialization.property("title_sentiment_max", core.serialization.number().optional()),
    contentSentimentMin: core.serialization.property("content_sentiment_min", core.serialization.number().optional()),
    contentSentimentMax: core.serialization.property("content_sentiment_max", core.serialization.number().optional()),
    iptcTags: core.serialization.property("iptc_tags", core.serialization.unknown().optional()),
    notIptcTags: core.serialization.property("not_iptc_tags", core.serialization.unknown().optional()),
    iabTags: core.serialization.property("iab_tags", core.serialization.unknown().optional()),
    notIabTags: core.serialization.property("not_iab_tags", core.serialization.unknown().optional()),
});

export declare namespace LatestHeadlinesRequest {
    interface Raw {
        when?: string | null;
        by_parse_date?: LatestHeadlinesRequestByParseDate.Raw | null;
        sort_by?: string | null;
        lang?: unknown | null;
        not_lang?: unknown | null;
        countries?: unknown | null;
        not_countries?: unknown | null;
        sources?: unknown | null;
        predefined_sources?: unknown | null;
        not_sources?: unknown | null;
        not_author_name?: unknown | null;
        ranked_only?: LatestHeadlinesRequestRankedOnly.Raw | null;
        is_headline?: LatestHeadlinesRequestIsHeadline.Raw | null;
        is_opinion?: LatestHeadlinesRequestIsOpinion.Raw | null;
        is_paid_content?: LatestHeadlinesRequestIsPaidContent.Raw | null;
        parent_url?: unknown | null;
        all_links?: unknown | null;
        all_domain_links?: unknown | null;
        word_count_min?: LatestHeadlinesRequestWordCountMin.Raw | null;
        word_count_max?: LatestHeadlinesRequestWordCountMax.Raw | null;
        page?: LatestHeadlinesRequestPage.Raw | null;
        page_size?: LatestHeadlinesRequestPageSize.Raw | null;
        clustering_variable?: string | null;
        clustering_enabled?: LatestHeadlinesRequestClusteringEnabled.Raw | null;
        clustering_threshold?: LatestHeadlinesRequestClusteringThreshold.Raw | null;
        include_nlp_data?: boolean | null;
        has_nlp?: boolean | null;
        theme?: string | null;
        not_theme?: string | null;
        ORG_entity_name?: string | null;
        PER_entity_name?: string | null;
        LOC_entity_name?: string | null;
        MISC_entity_name?: string | null;
        title_sentiment_min?: number | null;
        title_sentiment_max?: number | null;
        content_sentiment_min?: number | null;
        content_sentiment_max?: number | null;
        iptc_tags?: unknown | null;
        not_iptc_tags?: unknown | null;
        iab_tags?: unknown | null;
        not_iab_tags?: unknown | null;
    }
}
