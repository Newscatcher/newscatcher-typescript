/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as NewscatcherApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { Q } from "../../../../types/Q";
import { SearchIn } from "../../../../types/SearchIn";
import { IncludeSimilarDocuments } from "../../../../types/IncludeSimilarDocuments";
import { SimilarDocumentsNumber } from "../../../../types/SimilarDocumentsNumber";
import { SimilarDocumentsFields } from "../../../../types/SimilarDocumentsFields";
import { PredefinedSources } from "../../../../types/PredefinedSources";
import { Sources } from "../../../../types/Sources";
import { NotSources } from "../../../../types/NotSources";
import { Lang } from "../../../../types/Lang";
import { NotLang } from "../../../../types/NotLang";
import { Countries } from "../../../../types/Countries";
import { NotCountries } from "../../../../types/NotCountries";
import { From } from "../../../../types/From";
import { To } from "../../../../types/To";
import { ByParseDate } from "../../../../types/ByParseDate";
import { PublishedDatePrecision } from "../../../../types/PublishedDatePrecision";
import { SortBy } from "../../../../types/SortBy";
import { RankedOnly } from "../../../../types/RankedOnly";
import { FromRank } from "../../../../types/FromRank";
import { ToRank } from "../../../../types/ToRank";
import { IsHeadline } from "../../../../types/IsHeadline";
import { IsOpinion } from "../../../../types/IsOpinion";
import { IsPaidContent } from "../../../../types/IsPaidContent";
import { ParentUrl } from "../../../../types/ParentUrl";
import { AllLinks } from "../../../../types/AllLinks";
import { AllDomainLinks } from "../../../../types/AllDomainLinks";
import { WordCountMin } from "../../../../types/WordCountMin";
import { WordCountMax } from "../../../../types/WordCountMax";
import { Page } from "../../../../types/Page";
import { PageSize } from "../../../../types/PageSize";
import { IncludeNlpData } from "../../../../types/IncludeNlpData";
import { HasNlp } from "../../../../types/HasNlp";
import { Theme } from "../../../../types/Theme";
import { NotTheme } from "../../../../types/NotTheme";
import { NerName } from "../../../../types/NerName";
import { TitleSentimentMin } from "../../../../types/TitleSentimentMin";
import { TitleSentimentMax } from "../../../../types/TitleSentimentMax";
import { ContentSentimentMin } from "../../../../types/ContentSentimentMin";
import { ContentSentimentMax } from "../../../../types/ContentSentimentMax";
import { IptcTags } from "../../../../types/IptcTags";
import { NotIptcTags } from "../../../../types/NotIptcTags";
import { CustomTags } from "../../../../types/CustomTags";

export const SearchSimilarPostRequest: core.serialization.Schema<
    serializers.SearchSimilarPostRequest.Raw,
    NewscatcherApi.SearchSimilarPostRequest
> = core.serialization.object({
    q: Q,
    searchIn: core.serialization.property("search_in", SearchIn.optional()),
    includeSimilarDocuments: core.serialization.property(
        "include_similar_documents",
        IncludeSimilarDocuments.optional()
    ),
    similarDocumentsNumber: core.serialization.property("similar_documents_number", SimilarDocumentsNumber.optional()),
    similarDocumentsFields: core.serialization.property("similar_documents_fields", SimilarDocumentsFields.optional()),
    predefinedSources: core.serialization.property("predefined_sources", PredefinedSources.optional()),
    sources: Sources.optional(),
    notSources: core.serialization.property("not_sources", NotSources.optional()),
    lang: Lang.optional(),
    notLang: core.serialization.property("not_lang", NotLang.optional()),
    countries: Countries.optional(),
    notCountries: core.serialization.property("not_countries", NotCountries.optional()),
    from: core.serialization.property("from_", From.optional()),
    to: core.serialization.property("to_", To.optional()),
    byParseDate: core.serialization.property("by_parse_date", ByParseDate.optional()),
    publishedDatePrecision: core.serialization.property("published_date_precision", PublishedDatePrecision.optional()),
    sortBy: core.serialization.property("sort_by", SortBy.optional()),
    rankedOnly: core.serialization.property("ranked_only", RankedOnly.optional()),
    fromRank: core.serialization.property("from_rank", FromRank.optional()),
    toRank: core.serialization.property("to_rank", ToRank.optional()),
    isHeadline: core.serialization.property("is_headline", IsHeadline.optional()),
    isOpinion: core.serialization.property("is_opinion", IsOpinion.optional()),
    isPaidContent: core.serialization.property("is_paid_content", IsPaidContent.optional()),
    parentUrl: core.serialization.property("parent_url", ParentUrl.optional()),
    allLinks: core.serialization.property("all_links", AllLinks.optional()),
    allDomainLinks: core.serialization.property("all_domain_links", AllDomainLinks.optional()),
    wordCountMin: core.serialization.property("word_count_min", WordCountMin.optional()),
    wordCountMax: core.serialization.property("word_count_max", WordCountMax.optional()),
    page: Page.optional(),
    pageSize: core.serialization.property("page_size", PageSize.optional()),
    includeNlpData: core.serialization.property("include_nlp_data", IncludeNlpData.optional()),
    hasNlp: core.serialization.property("has_nlp", HasNlp.optional()),
    theme: Theme.optional(),
    notTheme: core.serialization.property("not_theme", NotTheme.optional()),
    nerName: core.serialization.property("ner_name", NerName.optional()),
    titleSentimentMin: core.serialization.property("title_sentiment_min", TitleSentimentMin.optional()),
    titleSentimentMax: core.serialization.property("title_sentiment_max", TitleSentimentMax.optional()),
    contentSentimentMin: core.serialization.property("content_sentiment_min", ContentSentimentMin.optional()),
    contentSentimentMax: core.serialization.property("content_sentiment_max", ContentSentimentMax.optional()),
    iptcTags: core.serialization.property("iptc_tags", IptcTags.optional()),
    notIptcTags: core.serialization.property("not_iptc_tags", NotIptcTags.optional()),
    customTags: core.serialization.property("custom_tags", CustomTags.optional()),
});

export declare namespace SearchSimilarPostRequest {
    interface Raw {
        q: Q.Raw;
        search_in?: SearchIn.Raw | null;
        include_similar_documents?: IncludeSimilarDocuments.Raw | null;
        similar_documents_number?: SimilarDocumentsNumber.Raw | null;
        similar_documents_fields?: SimilarDocumentsFields.Raw | null;
        predefined_sources?: PredefinedSources.Raw | null;
        sources?: Sources.Raw | null;
        not_sources?: NotSources.Raw | null;
        lang?: Lang.Raw | null;
        not_lang?: NotLang.Raw | null;
        countries?: Countries.Raw | null;
        not_countries?: NotCountries.Raw | null;
        from_?: From.Raw | null;
        to_?: To.Raw | null;
        by_parse_date?: ByParseDate.Raw | null;
        published_date_precision?: PublishedDatePrecision.Raw | null;
        sort_by?: SortBy.Raw | null;
        ranked_only?: RankedOnly.Raw | null;
        from_rank?: FromRank.Raw | null;
        to_rank?: ToRank.Raw | null;
        is_headline?: IsHeadline.Raw | null;
        is_opinion?: IsOpinion.Raw | null;
        is_paid_content?: IsPaidContent.Raw | null;
        parent_url?: ParentUrl.Raw | null;
        all_links?: AllLinks.Raw | null;
        all_domain_links?: AllDomainLinks.Raw | null;
        word_count_min?: WordCountMin.Raw | null;
        word_count_max?: WordCountMax.Raw | null;
        page?: Page.Raw | null;
        page_size?: PageSize.Raw | null;
        include_nlp_data?: IncludeNlpData.Raw | null;
        has_nlp?: HasNlp.Raw | null;
        theme?: Theme.Raw | null;
        not_theme?: NotTheme.Raw | null;
        ner_name?: NerName.Raw | null;
        title_sentiment_min?: TitleSentimentMin.Raw | null;
        title_sentiment_max?: TitleSentimentMax.Raw | null;
        content_sentiment_min?: ContentSentimentMin.Raw | null;
        content_sentiment_max?: ContentSentimentMax.Raw | null;
        iptc_tags?: IptcTags.Raw | null;
        not_iptc_tags?: NotIptcTags.Raw | null;
        custom_tags?: CustomTags.Raw | null;
    }
}
