/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as NewscatcherApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { SearchRequestFrom } from "../../types/SearchRequestFrom";
import { SearchRequestTo } from "../../types/SearchRequestTo";
import { SearchRequestByParseDate } from "../../types/SearchRequestByParseDate";
import { SearchRequestRankedOnly } from "../../types/SearchRequestRankedOnly";
import { SearchRequestFromRank } from "../../types/SearchRequestFromRank";
import { SearchRequestToRank } from "../../types/SearchRequestToRank";
import { SearchRequestIsHeadline } from "../../types/SearchRequestIsHeadline";
import { SearchRequestIsOpinion } from "../../types/SearchRequestIsOpinion";
import { SearchRequestIsPaidContent } from "../../types/SearchRequestIsPaidContent";
import { SearchRequestWordCountMin } from "../../types/SearchRequestWordCountMin";
import { SearchRequestWordCountMax } from "../../types/SearchRequestWordCountMax";
import { SearchRequestPage } from "../../types/SearchRequestPage";
import { SearchRequestPageSize } from "../../types/SearchRequestPageSize";
import { SearchRequestClusteringEnabled } from "../../types/SearchRequestClusteringEnabled";
import { SearchRequestClusteringThreshold } from "../../types/SearchRequestClusteringThreshold";
import { SearchRequestIncludeNlpData } from "../../types/SearchRequestIncludeNlpData";

export const SearchRequest: core.serialization.Schema<serializers.SearchRequest.Raw, NewscatcherApi.SearchRequest> =
    core.serialization.object({
        q: core.serialization.string(),
        searchIn: core.serialization.property("search_in", core.serialization.string().optional()),
        predefinedSources: core.serialization.property("predefined_sources", core.serialization.unknown().optional()),
        sources: core.serialization.unknown().optional(),
        notSources: core.serialization.property("not_sources", core.serialization.unknown().optional()),
        lang: core.serialization.unknown().optional(),
        notLang: core.serialization.property("not_lang", core.serialization.unknown().optional()),
        countries: core.serialization.unknown().optional(),
        notCountries: core.serialization.property("not_countries", core.serialization.unknown().optional()),
        notAuthorName: core.serialization.property("not_author_name", core.serialization.unknown().optional()),
        from: core.serialization.property("from_", SearchRequestFrom.optional()),
        to: core.serialization.property("to_", SearchRequestTo.optional()),
        publishedDatePrecision: core.serialization.property(
            "published_date_precision",
            core.serialization.string().optional()
        ),
        byParseDate: core.serialization.property("by_parse_date", SearchRequestByParseDate.optional()),
        sortBy: core.serialization.property("sort_by", core.serialization.string().optional()),
        rankedOnly: core.serialization.property("ranked_only", SearchRequestRankedOnly.optional()),
        fromRank: core.serialization.property("from_rank", SearchRequestFromRank.optional()),
        toRank: core.serialization.property("to_rank", SearchRequestToRank.optional()),
        isHeadline: core.serialization.property("is_headline", SearchRequestIsHeadline.optional()),
        isOpinion: core.serialization.property("is_opinion", SearchRequestIsOpinion.optional()),
        isPaidContent: core.serialization.property("is_paid_content", SearchRequestIsPaidContent.optional()),
        parentUrl: core.serialization.property("parent_url", core.serialization.unknown().optional()),
        allLinks: core.serialization.property("all_links", core.serialization.unknown().optional()),
        allDomainLinks: core.serialization.property("all_domain_links", core.serialization.unknown().optional()),
        wordCountMin: core.serialization.property("word_count_min", SearchRequestWordCountMin.optional()),
        wordCountMax: core.serialization.property("word_count_max", SearchRequestWordCountMax.optional()),
        page: SearchRequestPage.optional(),
        pageSize: core.serialization.property("page_size", SearchRequestPageSize.optional()),
        clusteringVariable: core.serialization.property("clustering_variable", core.serialization.string().optional()),
        clusteringEnabled: core.serialization.property("clustering_enabled", SearchRequestClusteringEnabled.optional()),
        clusteringThreshold: core.serialization.property(
            "clustering_threshold",
            SearchRequestClusteringThreshold.optional()
        ),
        includeNlpData: core.serialization.property("include_nlp_data", SearchRequestIncludeNlpData.optional()),
        hasNlp: core.serialization.property("has_nlp", core.serialization.boolean().optional()),
        theme: core.serialization.string().optional(),
        notTheme: core.serialization.property("not_theme", core.serialization.string().optional()),
        orgEntityName: core.serialization.property("ORG_entity_name", core.serialization.string().optional()),
        perEntityName: core.serialization.property("PER_entity_name", core.serialization.string().optional()),
        locEntityName: core.serialization.property("LOC_entity_name", core.serialization.string().optional()),
        miscEntityName: core.serialization.property("MISC_entity_name", core.serialization.string().optional()),
        titleSentimentMin: core.serialization.property("title_sentiment_min", core.serialization.number().optional()),
        titleSentimentMax: core.serialization.property("title_sentiment_max", core.serialization.number().optional()),
        contentSentimentMin: core.serialization.property(
            "content_sentiment_min",
            core.serialization.number().optional()
        ),
        contentSentimentMax: core.serialization.property(
            "content_sentiment_max",
            core.serialization.number().optional()
        ),
        iptcTags: core.serialization.property("iptc_tags", core.serialization.unknown().optional()),
        notIptcTags: core.serialization.property("not_iptc_tags", core.serialization.unknown().optional()),
        sourceName: core.serialization.property("source_name", core.serialization.unknown().optional()),
        iabTags: core.serialization.property("iab_tags", core.serialization.unknown().optional()),
        notIabTags: core.serialization.property("not_iab_tags", core.serialization.unknown().optional()),
        excludeDuplicates: core.serialization.property("exclude_duplicates", core.serialization.boolean().optional()),
        additionalDomainInfo: core.serialization.property(
            "additional_domain_info",
            core.serialization.boolean().optional()
        ),
        isNewsDomain: core.serialization.property("is_news_domain", core.serialization.boolean().optional()),
        newsDomainType: core.serialization.property("news_domain_type", core.serialization.unknown().optional()),
        newsType: core.serialization.property("news_type", core.serialization.unknown().optional()),
    });

export declare namespace SearchRequest {
    interface Raw {
        q: string;
        search_in?: string | null;
        predefined_sources?: unknown | null;
        sources?: unknown | null;
        not_sources?: unknown | null;
        lang?: unknown | null;
        not_lang?: unknown | null;
        countries?: unknown | null;
        not_countries?: unknown | null;
        not_author_name?: unknown | null;
        from_?: SearchRequestFrom.Raw | null;
        to_?: SearchRequestTo.Raw | null;
        published_date_precision?: string | null;
        by_parse_date?: SearchRequestByParseDate.Raw | null;
        sort_by?: string | null;
        ranked_only?: SearchRequestRankedOnly.Raw | null;
        from_rank?: SearchRequestFromRank.Raw | null;
        to_rank?: SearchRequestToRank.Raw | null;
        is_headline?: SearchRequestIsHeadline.Raw | null;
        is_opinion?: SearchRequestIsOpinion.Raw | null;
        is_paid_content?: SearchRequestIsPaidContent.Raw | null;
        parent_url?: unknown | null;
        all_links?: unknown | null;
        all_domain_links?: unknown | null;
        word_count_min?: SearchRequestWordCountMin.Raw | null;
        word_count_max?: SearchRequestWordCountMax.Raw | null;
        page?: SearchRequestPage.Raw | null;
        page_size?: SearchRequestPageSize.Raw | null;
        clustering_variable?: string | null;
        clustering_enabled?: SearchRequestClusteringEnabled.Raw | null;
        clustering_threshold?: SearchRequestClusteringThreshold.Raw | null;
        include_nlp_data?: SearchRequestIncludeNlpData.Raw | null;
        has_nlp?: boolean | null;
        theme?: string | null;
        not_theme?: string | null;
        ORG_entity_name?: string | null;
        PER_entity_name?: string | null;
        LOC_entity_name?: string | null;
        MISC_entity_name?: string | null;
        title_sentiment_min?: number | null;
        title_sentiment_max?: number | null;
        content_sentiment_min?: number | null;
        content_sentiment_max?: number | null;
        iptc_tags?: unknown | null;
        not_iptc_tags?: unknown | null;
        source_name?: unknown | null;
        iab_tags?: unknown | null;
        not_iab_tags?: unknown | null;
        exclude_duplicates?: boolean | null;
        additional_domain_info?: boolean | null;
        is_news_domain?: boolean | null;
        news_domain_type?: unknown | null;
        news_type?: unknown | null;
    }
}
