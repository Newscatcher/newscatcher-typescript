/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as NewscatcherApi from "../../api/index";
import * as core from "../../core";
import { Cluster } from "./Cluster";

export const ClusteringSearchResponse: core.serialization.ObjectSchema<
    serializers.ClusteringSearchResponse.Raw,
    NewscatcherApi.ClusteringSearchResponse
> = core.serialization.object({
    status: core.serialization.string().optional(),
    totalHits: core.serialization.property("total_hits", core.serialization.number()),
    page: core.serialization.number(),
    totalPages: core.serialization.property("total_pages", core.serialization.number()),
    pageSize: core.serialization.property("page_size", core.serialization.number()),
    clustersCount: core.serialization.property("clusters_count", core.serialization.number()),
    clusters: core.serialization.list(Cluster),
    userInput: core.serialization.property(
        "user_input",
        core.serialization.record(core.serialization.string(), core.serialization.unknown())
    ),
});

export declare namespace ClusteringSearchResponse {
    interface Raw {
        status?: string | null;
        total_hits: number;
        page: number;
        total_pages: number;
        page_size: number;
        clusters_count: number;
        clusters: Cluster.Raw[];
        user_input: Record<string, unknown>;
    }
}
