/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as NewscatcherApi from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Sources {
    interface Options {
        environment?: core.Supplier<environments.NewscatcherApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

/**
 * Operations to retrieve news sources.
 */
export class Sources {
    constructor(protected readonly _options: Sources.Options) {}

    /**
     * Retrieves a list of sources based on specified criteria such as language, country, rank, and more.
     *
     * @param {NewscatcherApi.SourcesGetRequest} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link NewscatcherApi.BadRequestError}
     * @throws {@link NewscatcherApi.UnauthorizedError}
     * @throws {@link NewscatcherApi.ForbiddenError}
     * @throws {@link NewscatcherApi.RequestTimeoutError}
     * @throws {@link NewscatcherApi.UnprocessableEntityError}
     * @throws {@link NewscatcherApi.TooManyRequestsError}
     * @throws {@link NewscatcherApi.InternalServerError}
     *
     * @example
     *     await client.sources.get({
     *         predefinedSources: "top 100 US, top 5 GB",
     *         sourceUrl: "bbc.com"
     *     })
     */
    public async get(
        request: NewscatcherApi.SourcesGetRequest = {},
        requestOptions?: Sources.RequestOptions
    ): Promise<NewscatcherApi.SourcesResponseDto> {
        const {
            lang,
            countries,
            predefinedSources,
            sourceName,
            sourceUrl,
            includeAdditionalInfo,
            isNewsDomain,
            newsDomainType,
            newsType,
            fromRank,
            toRank,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (lang != null) {
            _queryParams["lang"] = lang;
        }

        if (countries != null) {
            _queryParams["countries"] = countries;
        }

        if (predefinedSources != null) {
            _queryParams["predefined_sources"] = predefinedSources;
        }

        if (sourceName != null) {
            _queryParams["source_name"] = sourceName;
        }

        if (sourceUrl != null) {
            _queryParams["source_url"] = sourceUrl;
        }

        if (includeAdditionalInfo != null) {
            _queryParams["include_additional_info"] = includeAdditionalInfo.toString();
        }

        if (isNewsDomain != null) {
            _queryParams["is_news_domain"] = isNewsDomain.toString();
        }

        if (newsDomainType != null) {
            _queryParams["news_domain_type"] = newsDomainType;
        }

        if (newsType != null) {
            _queryParams["news_type"] = newsType;
        }

        if (fromRank != null) {
            _queryParams["from_rank"] = fromRank.toString();
        }

        if (toRank != null) {
            _queryParams["to_rank"] = toRank.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.NewscatcherApiEnvironment.Default,
                "api/sources"
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "newscatcher-sdk",
                "X-Fern-SDK-Version": "1.1.0",
                "User-Agent": "newscatcher-sdk/1.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.SourcesResponseDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new NewscatcherApi.BadRequestError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new NewscatcherApi.UnauthorizedError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new NewscatcherApi.ForbiddenError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 408:
                    throw new NewscatcherApi.RequestTimeoutError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new NewscatcherApi.UnprocessableEntityError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new NewscatcherApi.TooManyRequestsError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new NewscatcherApi.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.NewscatcherApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NewscatcherApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NewscatcherApiTimeoutError();
            case "unknown":
                throw new errors.NewscatcherApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves the list of sources available in the database. You can filter the sources by language, country, and more.
     *
     * @param {NewscatcherApi.SourcesPostRequest} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link NewscatcherApi.BadRequestError}
     * @throws {@link NewscatcherApi.UnauthorizedError}
     * @throws {@link NewscatcherApi.ForbiddenError}
     * @throws {@link NewscatcherApi.RequestTimeoutError}
     * @throws {@link NewscatcherApi.UnprocessableEntityError}
     * @throws {@link NewscatcherApi.TooManyRequestsError}
     * @throws {@link NewscatcherApi.InternalServerError}
     *
     * @example
     *     await client.sources.post({
     *         predefinedSources: ["top 50 US"],
     *         includeAdditionalInfo: true,
     *         isNewsDomain: true,
     *         newsDomainType: NewscatcherApi.NewsDomainType.OriginalContent,
     *         newsType: "General News Outlets"
     *     })
     */
    public async post(
        request: NewscatcherApi.SourcesPostRequest = {},
        requestOptions?: Sources.RequestOptions
    ): Promise<NewscatcherApi.SourcesResponseDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.NewscatcherApiEnvironment.Default,
                "api/sources"
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "newscatcher-sdk",
                "X-Fern-SDK-Version": "1.1.0",
                "User-Agent": "newscatcher-sdk/1.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SourcesPostRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.SourcesResponseDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new NewscatcherApi.BadRequestError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new NewscatcherApi.UnauthorizedError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new NewscatcherApi.ForbiddenError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 408:
                    throw new NewscatcherApi.RequestTimeoutError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 422:
                    throw new NewscatcherApi.UnprocessableEntityError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new NewscatcherApi.TooManyRequestsError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new NewscatcherApi.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.NewscatcherApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NewscatcherApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NewscatcherApiTimeoutError();
            case "unknown":
                throw new errors.NewscatcherApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-token": apiKeyValue };
    }
}
