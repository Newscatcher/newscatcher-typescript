/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as NewscatcherApi from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Sources {
    interface Options {
        environment?: core.Supplier<environments.NewscatcherApiEnvironment | string>;
        /** Override the x-api-token header */
        apiToken: core.Supplier<string>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-api-token header */
        apiToken?: string;
    }
}

export class Sources {
    constructor(protected readonly _options: Sources.Options) {}

    /**
     * This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing
     *
     * @param {NewscatcherApi.SourcesGetRequest} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link NewscatcherApi.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.get({
     *         lang: "lang",
     *         countries: "countries",
     *         predefinedSources: "predefined_sources",
     *         sourceName: "source_name",
     *         sourceUrl: "source_url",
     *         newsDomainType: "news_domain_type",
     *         newsType: "news_type"
     *     })
     */
    public async get(
        request: NewscatcherApi.SourcesGetRequest,
        requestOptions?: Sources.RequestOptions
    ): Promise<NewscatcherApi.SourceResponse> {
        const {
            lang,
            countries,
            predefinedSources,
            includeAdditionalInfo,
            fromRank,
            toRank,
            sourceName,
            sourceUrl,
            isNewsDomain,
            newsDomainType,
            newsType,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["lang"] = lang;
        _queryParams["countries"] = countries;
        _queryParams["predefined_sources"] = predefinedSources;
        if (includeAdditionalInfo != null) {
            _queryParams["include_additional_info"] = includeAdditionalInfo.toString();
        }

        if (fromRank != null) {
            _queryParams["from_rank"] = fromRank.toString();
        }

        if (toRank != null) {
            _queryParams["to_rank"] = toRank.toString();
        }

        _queryParams["source_name"] = sourceName;
        _queryParams["source_url"] = sourceUrl;
        if (isNewsDomain != null) {
            _queryParams["is_news_domain"] = isNewsDomain.toString();
        }

        _queryParams["news_domain_type"] = newsDomainType;
        _queryParams["news_type"] = newsType;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.NewscatcherApiEnvironment.Default,
                "api/sources"
            ),
            method: "GET",
            headers: {
                "x-api-token": await core.Supplier.get(this._options.apiToken),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "newscatcher-sdk",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "newscatcher-sdk/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.SourceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new NewscatcherApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.NewscatcherApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NewscatcherApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NewscatcherApiTimeoutError();
            case "unknown":
                throw new errors.NewscatcherApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing
     *
     * @param {NewscatcherApi.SourcesRequest} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link NewscatcherApi.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.post()
     */
    public async post(
        request: NewscatcherApi.SourcesRequest = {},
        requestOptions?: Sources.RequestOptions
    ): Promise<NewscatcherApi.SourceResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.NewscatcherApiEnvironment.Default,
                "api/sources"
            ),
            method: "POST",
            headers: {
                "x-api-token": await core.Supplier.get(this._options.apiToken),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "newscatcher-sdk",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "newscatcher-sdk/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SourcesRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.SourceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new NewscatcherApi.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.NewscatcherApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.NewscatcherApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.NewscatcherApiTimeoutError();
            case "unknown":
                throw new errors.NewscatcherApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
