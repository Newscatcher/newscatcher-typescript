/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as NewscatcherApi from "../index";

/**
 * The data model representing a single article in the search results.
 */
export interface ArticleEntity {
    /** The title of the article. */
    title: string;
    /** The primary author of the article. */
    author?: string;
    /** A list of authors of the article. */
    authors?: NewscatcherApi.Authors;
    /** A list of journalists associated with the article. */
    journalists?: NewscatcherApi.Journalists;
    /** The date the article was published. */
    publishedDate?: string;
    /** The precision of the published date. */
    publishedDatePrecision?: string;
    /** The date the article was last updated. */
    updatedDate?: string;
    /** The precision of the updated date. */
    updatedDatePrecision?: string;
    /** The date the article was parsed. */
    parseDate?: string;
    /** The URL link to the article. */
    link: string;
    /** The domain URL of the article. */
    domainUrl: string;
    /** The full domain URL of the article. */
    fullDomainUrl: string;
    /** The name of the source where the article was published. */
    nameSource?: string;
    /** Indicates if the article is a headline. */
    isHeadline?: boolean;
    /** Indicates if the article is paid content. */
    paidContent?: boolean;
    /** The categorical URL of the article. */
    parentUrl: string;
    /** The country where the article was published. */
    country?: string;
    /** The rights information for the article. */
    rights?: string;
    /** The rank of the article's source. */
    rank: number;
    /** The media associated with the article. */
    media?: string;
    /** The language in which the article is written. */
    language?: string;
    /** A brief description of the article. */
    description?: string;
    /** The content of the article. */
    content: string;
    /** The word count of the article. */
    wordCount?: number;
    /** Indicates if the article is an opinion piece. */
    isOpinion?: boolean;
    /** The Twitter account associated with the article. */
    twitterAccount?: string;
    /** A list of all URLs mentioned in the article. */
    allLinks?: NewscatcherApi.ArticleEntityAllLinks;
    /** A list of all domain URLs mentioned in the article. */
    allDomainLinks?: NewscatcherApi.ArticleEntityAllDomainLinks;
    nlp?: NewscatcherApi.NlpDataEntity;
    /** The unique identifier for the article. */
    id: string;
    /** The relevance score of the article. */
    score: number;
    /** An object that contains custom tags associated with an article, where each key is a taxonomy name, and the value is an array of tags. */
    customTags?: Record<string, string[]>;
    additionalDomainInfo?: NewscatcherApi.AdditionalDomainInfoEntity;
}
